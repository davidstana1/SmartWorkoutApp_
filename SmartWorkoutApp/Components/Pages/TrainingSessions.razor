@page "/TrainingSessions"
@using System.Security.Claims
@using DataAccess.Entities
@using DataAccess.Repository
@using DataAccess.Repository.Workout
@using DataAccess.Repository.Users
@rendermode InteractiveServer

<PageTitle>Training Sessions</PageTitle>

<h1 class="page-title">Training Sessions</h1>

@if (workouts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    @foreach (var userGroup in workouts.GroupBy(w => w.User))
    {
        <h2>@userGroup.Key.Name @userGroup.Key.Surname's Training Sessions</h2>

        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Day</th>
                    <th>Duration</th>
                    <th>Exercises</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var workout in userGroup)
                {
                    <tr>
                        <td>@workout.Name</td>
                        <td>@workout.Day</td>
                        <td>@workout.Duration</td>
                        <td>
                            <AuthorizeView Roles="Trainer">
                                <Authorized>
                                    <button class="btn btn-danger" @onclick="() => DeleteWorkout(workout)">Delete</button>
                                </Authorized>
                            </AuthorizeView>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="4">
                            <table class="table sub-table">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var exercise in workout.Exercises)
                                    {
                                        <tr>
                                            <td>@exercise.Name</td>
                                            <td>
                                                <AuthorizeView Roles="Trainer">
                                                    <Authorized>
                                                        <button class="btn btn-danger" @onclick="() => DeleteExercise(exercise)">Delete</button>
                                                        <button class="btn btn-warning" @onclick="() => EditExercise(exercise)">Update</button>
                                                    </Authorized>
                                                </AuthorizeView>
                                                <button class="btn btn-primary" @onclick="() => ShowLogs(exercise)">See Logs</button>
                                            </td>
                                        </tr>
                                        @if (selectedExercise != null && selectedExercise.Id == exercise.Id)
                                        {
                                            <tr>
                                                <td colspan="2">
                                                    <table class="table sub-table">
                                                        <thead>
                                                            <tr>
                                                                <th>Weight</th>
                                                                <th>Sets</th>
                                                                <th>Reps</th>
                                                                <th>Duration</th>
                                                                <th>Distance</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var log in exercise.ExerciseLogs)
                                                            {
                                                                <tr>
                                                                    <td>@log.Weight</td>
                                                                    <td>@log.Sets</td>
                                                                    <td>@log.Reps</td>
                                                                    <td>@log.Duration</td>
                                                                    <td>@log.Distance</td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (selectedExercise != null)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@selectedExercise.Name Logs</h5>
                        <button type="button" class="close" @onclick="CloseLogs" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Weight</th>
                                    <th>Sets</th>
                                    <th>Reps</th>
                                    <th>Duration</th>
                                    <th>Distance</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var log in selectedExercise.ExerciseLogs)
                                {
                                    <tr>
                                        <td>@log.Weight</td>
                                        <td>@log.Sets</td>
                                        <td>@log.Reps</td>
                                        <td>@log.Duration</td>
                                        <td>@log.Distance</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseLogs">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
}

@code {
    private List<Workout> workouts;
    private Exercise selectedExercise;
    private Trainer loggedInTrainer;

    [Inject] private IWorkoutRepository _workoutRepository { get; set; }
    [Inject] private IGenericRepository<Trainer> _trainerRepository { get; set; }
    [Inject] private IUserRepository _userRepository { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var email = user.FindFirst(ClaimTypes.Email)?.Value;
            loggedInTrainer = await _trainerRepository.GetByEmailTrainer(email);
            if (loggedInTrainer != null)
            {
                workouts = await _workoutRepository.GetAllForTrainer(loggedInTrainer.Id.ToString());
            }
        }
    }

    private void ShowLogs(Exercise exercise)
    {
        selectedExercise = exercise;
    }

    private void CloseLogs()
    {
        selectedExercise = null;
    }

    private async Task DeleteWorkout(Workout workout)
    {
        await _workoutRepository.Delete(workout);
        workouts.Remove(workout);
    }

    private async Task DeleteExercise(Exercise exercise)
    {
        // Implement delete functionality for exercises if needed
    }

    private void EditExercise(Exercise exercise)
    {
        // Implement edit functionality for exercises if needed
    }
}
