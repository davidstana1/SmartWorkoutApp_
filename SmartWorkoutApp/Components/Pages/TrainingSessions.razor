@page "/TrainingSessions"
@using System.Security.Claims
@using DataAccess.Entities
@using DataAccess.Repository
@using DataAccess.Repository.Exercises
@using DataAccess.Repository.Workout
@using DataAccess.Repository.Users
@rendermode InteractiveServer

<PageTitle>Training Sessions</PageTitle>
<link rel="stylesheet" href="styles.css">

<h1 class="page-title">Training Sessions</h1>

@if (workouts == null)
{
<p>
    <em>Loading...</em>
</p>
}
else
{
<div class="workouts-container">
    @foreach (var userGroup in workouts.GroupBy(w => w.User))
    {
    <h2>@userGroup.Key.Name @userGroup.Key.Surname's Training Sessions</h2>
    <div class="user-workouts">
        @foreach (var workout in userGroup)
        {
        <div class="workout">
            <h3>@workout.Name</h3>
            <div class="workout-details">
                <div class="details-row">
                    <strong>Day:</strong> @workout.Day
                </div>
                <div class="details-row">
                    <strong>Duration:</strong> @workout.Duration minutes
                </div>
                <div class="details-row">
                    <strong>Exercises:</strong>
                    <ul class="exercise-list">
                        @foreach (var exercise in workout.Exercises)
                        {
                        <li>
                            <span>@exercise.Name</span>
                            <div class="container-buttons">
                                <AuthorizeView Roles="Trainer">
                                    <Authorized>
                                        <button class="btn btn-danger" @onclick="() => DeleteExercise(exercise)">Delete</button>
                                    </Authorized>
                                </AuthorizeView>
                                <button class="btn btn-primary" @onclick="() => ShowLogs(exercise)">Logs</button>
                            </div>
                        </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        }
    </div>
    }
</div>

@if (selectedExercise != null)
{
<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@selectedExercise.Name Logs</h5>
                <button type="button" class="close" @onclick="CloseLogs" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table class="table">
                    <thead>
                    <tr>
                        <th>Weight</th>
                        <th>Sets</th>
                        <th>Reps</th>
                        <th>Duration</th>
                        <th>Distance</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var log in selectedExercise.ExerciseLogs)
                    {
                    <tr>
                        <td>@log.Weight</td>
                        <td>@log.Sets</td>
                        <td>@log.Reps</td>
                        <td>@log.Duration min</td>
                        <td>@log.Distance</td>
                    </tr>
                    }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary close-btn" @onclick="CloseLogs">Close</button>
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>
}
}

@code {
private List<Workout> workouts;
private Exercise selectedExercise;
private Trainer loggedInTrainer;

[Inject] private IWorkoutRepository _workoutRepository { get; set; }
[Inject] private IGenericRepository<Trainer> _trainerRepository { get; set; }
[Inject] private IUserRepository _userRepository { get; set; }
[Inject] private IGenericRepository<Exercise> _exerciseRepository { get; set; }
[Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

protected override async Task OnInitializedAsync()
{
var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
var user = authState.User;

if (user.Identity.IsAuthenticated)
{
var email = user.FindFirst(ClaimTypes.Email)?.Value;
loggedInTrainer = await _trainerRepository.GetByEmailTrainer(email);
if (loggedInTrainer != null)
{
workouts = await _workoutRepository.GetAllForTrainer(loggedInTrainer.Id.ToString());
}
}
}

private void ShowLogs(Exercise exercise)
{
selectedExercise = exercise;
}

private void CloseLogs()
{
selectedExercise = null;
}

private async Task DeleteExercise(Exercise exercise)
{
foreach (var workout in workouts)
{
var exerciseToRemove = workout.Exercises.FirstOrDefault(e => e.Id == exercise.Id);
if (exerciseToRemove != null)
{
workout.Exercises.Remove(exerciseToRemove);
await _exerciseRepository.Delete(exerciseToRemove);
await _workoutRepository.Update(workout); 
break;
}
}
}

}
