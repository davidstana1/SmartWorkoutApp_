@page "/Workouts"
@using System.Security.Claims
@using DataAccess.Entities
@using DataAccess.Repository
@using DataAccess.Repository.Workout
@rendermode InteractiveServer

<link href="css/styles.css" rel="stylesheet" />

<PageTitle>Workouts</PageTitle>

<h1>Workouts</h1>

<div class="container">
    <h3 class="title">Add New Workout</h3>
    <EditForm Model="newWorkout" OnValidSubmit="HandleValidSubmit">
        <div class="content form">
            <div class="user-details">
                <div class="input-box">
                    <span class="details">User</span>
                    <select class="form-control" @bind="selectedUserId" required>
                        <option value="" disabled>Select User</option>
                        @if (users != null)
                        {
                            @foreach (var user in users)
                            {
                                <option value="@user.Id">@user.Name @user.Surname</option>
                            }
                        }
                    </select>
                </div>
                <div class="input-box">
                    <span class="details">Workout Name</span>
                    <InputText class="form-control" id="Name" @bind-Value="newWorkout.Name" required />
                </div>
                <div class="input-box">
                    <span class="details">Day</span>
                    <InputSelect class="form-control" id="Day" @bind-Value="newWorkout.Day" required>
                        @foreach (DayEnum day in Enum.GetValues(typeof(DayEnum)))
                        {
                            <option value="@day">@day</option>
                        }
                    </InputSelect>
                </div>
                <div class="input-box">
                    <span class="details">Duration</span>
                    <InputNumber class="form-control" id="Duration" @bind-Value="newWorkout.Duration" required />
                </div>
            </div>
            <div class="button">
                <button type="submit" class="btn btn-primary button-add">Add Workout</button>
            </div>
        </div>
    </EditForm>
</div>

@if (workouts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User</th>
                <th>Workout Name</th>
                <th>Duration</th>
                <th>Day</th>
                <th>Actions</th> <!-- Coloană nouă pentru butoanele de acțiune -->
            </tr>
        </thead>
        <tbody>
            @foreach (var workout in workouts)
            {
                <tr>
                    <td>@workout.User.Name @workout.User.Surname</td>
                    <td>@workout.Name</td>
                    <td>@workout.Duration</td>
                    <td>@workout.Day</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteWorkout(workout)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Workout> workouts;
    private List<User> users;
    private Workout newWorkout = new Workout { User = new User() };
    private string selectedUserId = "";
    private Trainer loggedInTrainer;

    [Inject] private IWorkoutRepository _workoutRepository { get; set; }
    [Inject] private IUserRepository _userRepository { get; set; }
    [Inject] private IGenericRepository<Trainer> _trainerRepository { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        users = await _userRepository.GetAll();
        
        if (user.Identity.IsAuthenticated)
        {
            var email = user.FindFirst(ClaimTypes.Email)?.Value;
            loggedInTrainer = await _trainerRepository.GetByEmailTrainer(email);
            if (loggedInTrainer != null)
            {
                workouts = await _workoutRepository.GetAllForTrainer(loggedInTrainer.Id);
                users = await _userRepository.GetAllUsersForTrainer(loggedInTrainer.Id);
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        var selectedUser = await _userRepository.GetById(selectedUserId);

        if (selectedUser != null)
        {
            newWorkout.User = selectedUser;

            try
            {
                await _workoutRepository.Add(newWorkout);
                workouts.Add(newWorkout);
            }
            catch (Exception ex)
            {
                // Log the exception or handle it appropriately
                Console.WriteLine($"Error adding workout: {ex.Message}");
                return; // Exit early to prevent further execution
            }

            // Reset form fields
            newWorkout = new Workout { User = new User() };

            // Trigger UI update
            StateHasChanged();
        }
        else
        {
            // Handle case where selectedUser is null (user not found)
            Console.WriteLine("Selected user not found.");
        }
    }

    private async Task DeleteWorkout(Workout workoutToDelete)
    {
        try
        {
            await _workoutRepository.Delete(workoutToDelete);
            workouts.Remove(workoutToDelete);
        }
        catch (Exception ex)
        {
            // Log the exception or handle it appropriately
            Console.WriteLine($"Error deleting workout: {ex.Message}");
        }
    }
}
