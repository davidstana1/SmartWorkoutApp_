@page "/SignUp"
@using System.Security.Claims
@using DataAccess.Entities
@using DataAccess.Repository
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using SmartWorkoutApp.Services.PasswordHashing
@inject IGenericRepository<User> _userRepository
@inject IGenericRepository<Trainer> _trainerRepository 
@inject NavigationManager NavigationManager
@inject ILogger<SignUp> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<div class="container">
    <div class="title">Registration</div>
    <link rel="stylesheet" href="css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&display=swap" rel="stylesheet">
    <div class="content">
        <EditForm Model="@signUpModel" OnValidSubmit="RegisterUser">
            <DataAnnotationsValidator />
            <div class="user-details">
                <div class="input-box">
                    <span class="details">Name</span>
                    <InputText @bind-Value="signUpModel.Name" placeholder="Enter your name" required />
                    <ValidationMessage For="@(() => signUpModel.Name)" />
                </div>
                <div class="input-box">
                    <span class="details">Surname</span>
                    <InputText @bind-Value="signUpModel.Surname" placeholder="Enter your surname" required />
                    <ValidationMessage For="@(() => signUpModel.Surname)" />
                </div>
                <div class="input-box">
                    <span class="details">Email</span>
                    <InputText @bind-Value="signUpModel.Email" placeholder="Enter your email" required />
                    <ValidationMessage For="@(() => signUpModel.Email)" />
                </div>
                <div class="input-box">
                    <span class="details">Password</span>
                    <InputText @bind-Value="signUpModel.Password" type="password" placeholder="Enter your password" required />
                    <ValidationMessage For="@(() => signUpModel.Password)" />
                </div>
                <div class="input-box">
                    <span class="details">Phone</span>
                    <InputText @bind-Value="signUpModel.Phone" placeholder="Enter your phone number" required />
                    <ValidationMessage For="@(() => signUpModel.Phone)" />
                </div>
                <div class="input-box">
                    <span class="details">Weight</span>
                    <InputNumber @bind-Value="signUpModel.Weight" placeholder="Enter your weight" required />
                    <ValidationMessage For="@(() => signUpModel.Weight)" />
                </div>
                <div class="input-box">
                    <span class="details">Age</span>
                    <InputNumber @bind-Value="signUpModel.Age" placeholder="Enter your age" required />
                    <ValidationMessage For="@(() => signUpModel.Age)" />
                </div>
                <div class="input-box">
                    <span class="details">Role</span>
                    <InputSelect @bind-Value="signUpModel.Role" @onchange="HandleRoleChange" required>
                        <option value="">Select Role</option>
                        <option value="Client">Client</option>
                        <option value="Trainer">Trainer</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => signUpModel.Role)" />
                </div>
                @if (signUpModel.Role == "Client")
                {
                <div class="input-box">
                    <span class="details">Trainer</span>
                    <InputSelect @bind-Value="signUpModel.Trainer.Id" required>
                        <option value="">Select Trainer</option>
                        @foreach (var trainer in trainers)
                        {
                            <option value="@trainer.Id">@trainer.Name @trainer.Surname</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => signUpModel.Trainer.Id)" />
                </div>
                }
            </div>
            <div class="button">
                <input type="submit" value="Register">
            </div>
            <div class="login-link">
                Already have an account? <a href="/Login">Login now</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
private SignUpModel signUpModel = new();
private bool showTrainerDropdown = false;
private List<Trainer> trainers = new List<Trainer>();

protected override async Task OnInitializedAsync()
{
    await LogoutUser();
    trainers = await _trainerRepository.GetAll();
}

private void HandleRoleChange(ChangeEventArgs e)
{
    var selectedRole = e.Value.ToString();
    showTrainerDropdown = selectedRole == "Client";
    signUpModel.Role = selectedRole; // Ensure the model is updated
}

private async Task RegisterUser()
{
    var user = await _userRepository.GetByEmail(signUpModel.Email);
    if (user != null)
    {
        // Handle duplicate user error
        return;
    }

    string salt = PasswordHasher.GenerateSalt();
    string hashedPassword = PasswordHasher.HashPassword(signUpModel.Password, salt);

    if (signUpModel.Role == "Trainer")
    {
        var newTrainer = new Trainer
        {
            Name = signUpModel.Name,
            Surname = signUpModel.Surname,
            Email = signUpModel.Email,
            Password = hashedPassword,
            Salt = salt,
            Phone = signUpModel.Phone,
            Weight = signUpModel.Weight,
            Age = signUpModel.Age
        };

        await _trainerRepository.Add(newTrainer);
    }
    else
    {
        var trainer = await _trainerRepository.GetById(signUpModel.Trainer.Id);
        var newUser = new User
        {
            Name = signUpModel.Name,
            Surname = signUpModel.Surname,
            Email = signUpModel.Email,
            Password = hashedPassword,
            Salt = salt,
            Phone = signUpModel.Phone,
            Weight = signUpModel.Weight,
            Age = signUpModel.Age,
            Role = Enum.Parse<RoleEnum>(signUpModel.Role, true),
            Trainer = trainer 
        };

        await _userRepository.Add(newUser);
    }

    NavigationManager.NavigateTo("/Login", forceLoad: true);
}

private async Task LogoutUser()
{
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;

    if (user.Identity.IsAuthenticated)
    {
        await AuthenticationStateProvider.GetAuthenticationStateAsync(); // Clear the authentication state
        NavigationManager.NavigateTo("/Logout", true); // Redirect to a logout page or endpoint
    }
}
}
